#include <stdio.h>
#include <stdlib.h>

// Structure to represent a diagonal matrix
struct DiagonalMatrix {
    int* array;
    int order;
};

// Function to create a diagonal matrix
struct DiagonalMatrix* createDiagonalMatrix(int order) {
    struct DiagonalMatrix* diagonalMatrix = (struct DiagonalMatrix*)malloc(sizeof(struct DiagonalMatrix));
    diagonalMatrix->array = (int*)malloc(order * sizeof(int));

    diagonalMatrix->order = order;

    // Initialize all elements to zero
    for (int i = 0; i < order; ++i) {
        diagonalMatrix->array[i] = 0;
    }

    return diagonalMatrix;
}

// Function to set the value of an element in the diagonal matrix
void setElement(struct DiagonalMatrix* diagonalMatrix, int row, int col, int value) {
    if (row < 0 || row >= diagonalMatrix->order || col < 0 || col >= diagonalMatrix->order) {
        printf("Invalid index\n");
        exit(EXIT_FAILURE);
    }

    if (row != col) {
        // Only set values on the main diagonal
        printf("Cannot set values outside the main diagonal\n");
        exit(EXIT_FAILURE);
    }

    diagonalMatrix->array[row] = value;
}

// Function to get the value of an element in the diagonal matrix
int getElement(struct DiagonalMatrix* diagonalMatrix, int row, int col) {
    if (row < 0 || row >= diagonalMatrix->order || col < 0 || col >= diagonalMatrix->order) {
        printf("Invalid index\n");
        exit(EXIT_FAILURE);
    }

    if (row != col) {
        // Only non-zero values on the main diagonal
        return 0;
    }

    return diagonalMatrix->array[row];
}

// Function to display the diagonal matrix
void displayMatrix(struct DiagonalMatrix* diagonalMatrix) {
    for (int i = 0; i < diagonalMatrix->order; ++i) {
        for (int j = 0; j < diagonalMatrix->order; ++j) {
            printf("%d ", getElement(diagonalMatrix, i, j));
        }
        printf("\n");
    }
}

// Function to free memory occupied by the diagonal matrix
void freeDiagonalMatrix(struct DiagonalMatrix* diagonalMatrix) {
    free(diagonalMatrix->array);
    free(diagonalMatrix);
}

int main() {
    int order;

    // Input: Order of the diagonal matrix
    printf("Enter the order of the diagonal matrix: ");
    scanf("%d", &order);

    if (order <= 0) {
        printf("Please enter a positive order for the diagonal matrix.\n");
        return 1;
    }

    // Create diagonal matrix
    struct DiagonalMatrix* diagonalMatrix = createDiagonalMatrix(order);

    // Input: Set values in the diagonal matrix
    printf("Enter values for the diagonal matrix:\n");
    for (int i = 0; i < order; ++i) {
        int value;
        printf("Enter value for element (%d, %d): ", i, i);
        scanf("%d", &value);
        setElement(diagonalMatrix, i, i, value);
    }

    // Display diagonal matrix
    printf("\nDiagonal Matrix:\n");
    displayMatrix(diagonalMatrix);

    // Free memory
    freeDiagonalMatrix(diagonalMatrix);

    return 0;
}
