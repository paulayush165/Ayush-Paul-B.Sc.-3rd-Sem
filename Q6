#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Stack {
    struct Node* top;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->data = data;
    newNode->next = NULL;

    return newNode;
}


void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}


int isEmpty(struct Stack* stack) {
    return stack->top == NULL;
}


void push(struct Stack* stack, int data) {
    struct Node* newNode = createNode(data);

    if (stack->top == NULL) {
        stack->top = newNode;
    } else {
        newNode->next = stack->top;
        stack->top = newNode;
    }

    printf("%d pushed onto the stack\n", data);
}


int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }

    int poppedValue = stack->top->data;
    struct Node* temp = stack->top;
    stack->top = stack->top->next;

    free(temp);

    return poppedValue;
}


void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    printf("Stack elements: ");
    struct Node* current = stack->top;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Stack stack;
    initializeStack(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);

    display(&stack);

    printf("Popped element: %d\n", pop(&stack));
    display(&stack);

    return 0;
}
