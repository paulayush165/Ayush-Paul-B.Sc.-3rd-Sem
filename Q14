#include <stdio.h>
#include <stdlib.h>

// Node structure for BST
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->data = value;
    newNode->left = newNode->right = NULL;

    return newNode;
}

// Function to insert a value into the BST (Recursive)
struct Node* insertRecursive(struct Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }

    if (value < root->data) {
        root->left = insertRecursive(root->left, value);
    } else if (value > root->data) {
        root->right = insertRecursive(root->right, value);
    }

    return root;
}

// Function to insert a value into the BST (Iterative)
struct Node* insertIterative(struct Node* root, int value) {
    struct Node *newNode = createNode(value);
    if (root == NULL) {
        return newNode;
    }

    struct Node *current = root;
    struct Node *parent = NULL;

    while (current != NULL) {
        parent = current;

        if (value < current->data) {
            current = current->left;
        } else if (value > current->data) {
            current = current->right;
        } else {
            // Duplicate value, handle as needed
            free(newNode);
            return root;
        }
    }

    if (value < parent->data) {
        parent->left = newNode;
    } else {
        parent->right = newNode;
    }

    return root;
}

// TODO: Implement other functions as per your requirements

int main() {
    struct Node* root = NULL;

    // Example usage of insertRecursive
    root = insertRecursive(root, 50);
    root = insertRecursive(root, 30);
    root = insertRecursive(root, 20);
    root = insertRecursive(root, 40);
    root = insertRecursive(root, 70);
    root = insertRecursive(root, 60);
    root = insertRecursive(root, 80);

    // Example usage of insertIterative
    root = insertIterative(root, 55);
    root = insertIterative(root, 35);
    root = insertIterative(root, 25);
    root = insertIterative(root, 45);
    root = insertIterative(root, 75);
    root = insertIterative(root, 65);
    root = insertIterative(root, 85);

    // TODO: Perform other operations and display the tree

    return 0;
}
