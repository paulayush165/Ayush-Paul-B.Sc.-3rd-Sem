#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coefficient;
    int exponent;
    struct Node* next;
};

struct Node* createNode(int coefficient, int exponent) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }

    newNode->coefficient = coefficient;
    newNode->exponent = exponent;
    newNode->next = NULL;

    return newNode;
}

void insertTerm(struct Node** poly, int coefficient, int exponent) {
    struct Node* newNode = createNode(coefficient, exponent);

    if (*poly == NULL || exponent > (*poly)->exponent) {
        newNode->next = *poly;
        *poly = newNode;
    } else {
        struct Node* current = *poly;
        while (current->next != NULL && current->next->exponent > exponent) {
            current = current->next;
        }

        newNode->next = current->next;
        current->next = newNode;
    }
}

void displayPolynomial(struct Node* poly) {
    while (poly != NULL) {
        printf("%dx^%d", poly->coefficient, poly->exponent);
        poly = poly->next;
        if (poly != NULL) {
            printf(" + ");
        }
    }
    printf("\n");
}

struct Node* addPolynomials(struct Node* poly1, struct Node* poly2) {
    struct Node* result = NULL;

    while (poly1 != NULL || poly2 != NULL) {
        int coefficient1 = (poly1 != NULL) ? poly1->coefficient : 0;
        int exponent1 = (poly1 != NULL) ? poly1->exponent : -1;

        int coefficient2 = (poly2 != NULL) ? poly2->coefficient : 0;
        int exponent2 = (poly2 != NULL) ? poly2->exponent : -1;

        int sumCoefficient = coefficient1 + coefficient2;
        int maxExponent = (exponent1 > exponent2) ? exponent1 : exponent2;

        insertTerm(&result, sumCoefficient, maxExponent);

        if (exponent1 == maxExponent) {
            poly1 = poly1->next;
        }
        if (exponent2 == maxExponent) {
            poly2 = poly2->next;
        }
    }

    return result;
}
void freePolynomial(struct Node* poly) {
    struct Node* current = poly;
    struct Node* nextNode = NULL;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

int main() {
    struct Node* poly1 = NULL;
    struct Node* poly2 = NULL;
    int terms1;
    printf("Enter the number of terms in Polynomial 1: ");
    scanf("%d", &terms1);

    printf("Enter the terms of Polynomial 1 (coefficient exponent):\n");
    for (int i = 0; i < terms1; ++i) {
        int coefficient, exponent;
        scanf("%d %d", &coefficient, &exponent);
        insertTerm(&poly1, coefficient, exponent);
    }
    int terms2;
    printf("Enter the number of terms in Polynomial 2: ");
    scanf("%d", &terms2);

    printf("Enter the terms of Polynomial 2 (coefficient exponent):\n");
    for (int i = 0; i < terms2; ++i) {
        int coefficient, exponent;
        scanf("%d %d", &coefficient, &exponent);
        insertTerm(&poly2, coefficient, exponent);
    }
    printf("Polynomial 1: ");
    displayPolynomial(poly1);

    printf("Polynomial 2: ");
    displayPolynomial(poly2);

   
    struct Node* sum = addPolynomials(poly1, poly2);

   
    printf("Sum of Polynomial 1 and Polynomial 2: ");
    displayPolynomial(sum);

    // Freeing memory
    freePolynomial(poly1);
    freePolynomial(poly2);
    freePolynomial(sum);

    return 0;
}
