#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int arr[MAX_SIZE];
    int top;
};

// Function to initialize a stack
void initialize(struct Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack *stack, int data) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }

    stack->arr[++stack->top] = data;
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }

    return stack->arr[stack->top--];
}

// Function to reverse the order of elements in the stack using an additional stack
void reverseStack(struct Stack *inputStack, struct Stack *auxStack) {
    while (!isEmpty(inputStack)) {
        int element = pop(inputStack);
        push(auxStack, element);
    }

    while (!isEmpty(auxStack)) {
        int element = pop(auxStack);
        push(inputStack, element);
    }
}

// Function to display the elements of the stack
void display(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    printf("Stack elements: ");
    for (int i = 0; i <= stack->top; ++i) {
        printf("%d ", stack->arr[i]);
    }
    printf("\n");
}

int main() {
    struct Stack inputStack, auxStack;

    // Initialize stacks
    initialize(&inputStack);
    initialize(&auxStack);

    // Push elements onto the stack
    push(&inputStack, 1);
    push(&inputStack, 2);
    push(&inputStack, 3);
    push(&inputStack, 4);
    push(&inputStack, 5);

    // Display original stack
    printf("Original stack:\n");
    display(&inputStack);

    // Reverse the order of elements in the stack using an additional stack
    reverseStack(&inputStack, &auxStack);

    // Display reversed stack
    printf("\nReversed stack:\n");
    display(&inputStack);

    return 0;
}
