#include <iostream>
using namespace std;
template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class CircularLinkedList {
private:
    Node<T>* head;

public:
    CircularLinkedList() : head(nullptr) {}

    // Function to insert a new element at the end of the list
    void insert(T value) {
        Node<T>* newNode = new Node<T>(value);

        if (head == nullptr) {
            head = newNode;
            newNode->next = head;
        } else {
            Node<T>* current = head;
            while (current->next != head) {
                current = current->next;
            }
            current->next = newNode;
            newNode->next = head;
        }
    }

    // Function to delete a specific element from the list
    void deleteNode(T value) {
        if (head == nullptr) {
            cout << "List is empty." << std::endl;
            return;
        }

        Node<T>* current = head;
        Node<T>* prev = nullptr;

        // Find the node to be deleted and its previous node
        do {
            if (current->data == value) {
                break;
            }
            prev = current;
            current = current->next;
        } while (current != head);

        // If the node to be deleted is the only node in the list
        if (current == head && current->next == head) {
            delete current;
            head = nullptr;
        } else if (current == head) {
            // If the node to be deleted is the head of the list
            prev->next = current->next;
            head = current->next;
            delete current;
        } else {
            // If the node to be deleted is in the middle or end of the list
            prev->next = current->next;
            delete current;
        }
    }

    // Function to search for a specific element in the list
    bool search(T value) {
        if (head == nullptr) {
            return false;
        }

        Node<T>* current = head;
        do {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        } while (current != head);

        return false;
    }

    // Function to reverse the circular linked list
    void reverse() {
        if (head == nullptr) {
            return;
        }

        Node<T>* prev = nullptr;
        Node<T>* current = head;
        Node<T>* nextNode = nullptr;

        do {
            nextNode = current->next;
            current->next = prev;
            prev = current;
            current = nextNode;
        } while (current != head);

        head->next = prev;
        head = prev;
    }

    // Function to display the elements of the circular linked list
    void display() const {
        if (head == nullptr) {
            std::cout << "List is empty." << std::endl;
            return;
        }

        Node<T>* current = head;
        do {
            std::cout << current->data << " ";
            current = current->next;
        } while (current != head);
        cout << endl;
    }

    // Destructor to free memory
    ~CircularLinkedList() {
        if (head == nullptr) {
            return;
        }

        Node<T>* current = head;
        Node<T>* nextNode = nullptr;

        do {
            nextNode = current->next;
            delete current;
            current = nextNode;
        } while (current != head);
    }
};

int main() {
    // Example usage of CircularLinkedList
    CircularLinkedList<int> circularList;
    circularList.insert(1);
    circularList.insert(2);
    circularList.insert(3);

    cout << "Original List: ";
    circularList.display();

    circularList.reverse();

    std::cout << "Reversed List: ";
    circularList.display();

    return 0;
}
