#include <stdio.h>
#include <stdlib.h>

// Structure to represent an AVL tree node
struct AVLNode {
    int data;
    struct AVLNode* left;
    struct AVLNode* right;
    int height;
};

// Function to get the height of a node
int getHeight(struct AVLNode* node) {
    return (node == NULL) ? 0 : node->height;
}

// Function to calculate the balance factor of a node
int getBalanceFactor(struct AVLNode* node) {
    return (node == NULL) ? 0 : getHeight(node->left) - getHeight(node->right);
}

// Function to update the height of a node
void updateHeight(struct AVLNode* node) {
    if (node != NULL) {
        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);
        node->height = (leftHeight > rightHeight) ? leftHeight + 1 : rightHeight + 1;
    }
}

// Function to perform a right rotation
struct AVLNode* rightRotate(struct AVLNode* y) {
    struct AVLNode* x = y->left;
    struct AVLNode* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    updateHeight(y);
    updateHeight(x);

    return x;
}

// Function to perform a left rotation
struct AVLNode* leftRotate(struct AVLNode* x) {
    struct AVLNode* y = x->right;
    struct AVLNode* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    updateHeight(x);
    updateHeight(y);

    return y;
}

// Function to insert a new node into the AVL tree
struct AVLNode* insert(struct AVLNode* root, int data) {
    // Standard BST insertion
    if (root == NULL) {
        struct AVLNode* newNode = (struct AVLNode*)malloc(sizeof(struct AVLNode));
        newNode->data = data;
        newNode->left = NULL;
        newNode->right = NULL;
        newNode->height = 1;
        return newNode;
    }

    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    } else {
        // Duplicate keys are not allowed
        return root;
    }

    // Update height of the current node
    updateHeight(root);

    // Get the balance factor to check if the node became unbalanced
    int balance = getBalanceFactor(root);

    // Left Heavy (LL case)
    if (balance > 1 && data < root->left->data) {
        return rightRotate(root);
    }

    // Right Heavy (RR case)
    if (balance < -1 && data > root->right->data) {
        return leftRotate(root);
    }

    // Left Right Heavy (LR case)
    if (balance > 1 && data > root->left->data) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Left Heavy (RL case)
    if (balance < -1 && data < root->right->data) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Function to find the node with the minimum value in the AVL tree
struct AVLNode* minValueNode(struct AVLNode* node) {
    struct AVLNode* current = node;

    // Find the leftmost leaf node
    while (current->left != NULL) {
        current = current->left;
    }

    return current;
}

// Function to delete a node with the given key from the AVL tree
struct AVLNode* deleteNode(struct AVLNode* root, int key) {
    // Standard BST delete
    if (root == NULL) {
        return root;
    }

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if ((root->left == NULL) || (root->right == NULL)) {
            struct AVLNode* temp = (root->left != NULL) ? root->left : root->right;

            // No child case
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else {
                *root = *temp; // Copy the contents of the non-empty child
            }

            free(temp);
        } else {
            // Node with two children: Get the inorder successor (smallest in the right subtree)
            struct AVLNode* temp = minValueNode(root->right);

            // Copy the inorder successor's data to this node
            root->data = temp->data;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->data);
        }
    }

    // If the tree had only one node, return
    if (root == NULL) {
        return root;
    }

    // Update height of the current node
    updateHeight(root);

    // Get the balance factor to check if the node became unbalanced
    int balance = getBalanceFactor(root);

    // Left Heavy
    if (balance > 1) {
        // Left Right Heavy (LR case)
        if (getBalanceFactor(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        // Left Heavy (LL case)
        return rightRotate(root);
    }

    // Right Heavy
    if (balance < -1) {
        // Right Left Heavy (RL case)
        if (getBalanceFactor(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }
        // Right Heavy (RR case)
        return leftRotate(root);
    }

    return root;
}

// Function to perform inorder traversal of the AVL tree
void inorderTraversal(struct AVLNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function to free memory occupied by the AVL tree
void freeAVLTree(struct AVLNode* root) {
    if (root != NULL) {
        freeAVLTree(root->left);
        freeAVLTree(root->right);
        free(root);
    }
}

int main() {
    struct AVLNode* root = NULL;

    // Insert nodes into the AVL tree
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    printf("Inorder Traversal after Insertion: ");
    inorderTraversal(root);
    printf("\n");

    // Delete a node from the AVL tree
    root = deleteNode(root, 30);

    printf("Inorder Traversal after Deletion: ");
    inorderTraversal(root);
    printf("\n");

    // Free memory occupied by the AVL tree
    freeAVLTree(root);

    return 0;
}
